---
import type { CollectionEntry } from "astro:content";

interface Props {
  headings: Awaited<
    ReturnType<CollectionEntry<"article">["render"]>
  >["headings"];
}

const { headings } = Astro.props;

const minDepth = Math.min(...headings.map(({ depth }) => depth));
---

<section class="article-toc flex flex-col">
  <h2 class="text-lg font-bold">目次</h2>
  <ol>
    {
      headings.map(({ depth, slug, text }) => {
        if (depth > minDepth + 1) {
          return null;
        }

        return (
          <li class="group" data-toc-slug={slug} data-active="true">
            <a class="flex" href={`#${slug}`}>
              <div class="w-4 pr-2 flex flex-col items-center">
                <div class="w-0.5 h-3.5 bg-slate-300 dark:bg-slate-700 group-first:bg-transparent" />
                <div
                  class:list={[
                    "rounded-full opacity-60 group-hover:opacity-100 group-data-[active=true]:opacity-100 bg-blue-900 dark:bg-slate-400",
                    {
                      "size-2": depth === minDepth,
                      "size-1": depth > minDepth,
                    },
                  ]}
                />
                <div class="flex-1 w-0.5 bg-slate-300 dark:bg-slate-700 group-last:bg-transparent" />
              </div>
              <span
                class:list={[
                  "my-1.5 group-last:mb-0 opacity-60 group-hover:opacity-100 group-data-[active=true]:opacity-100 transition-opacity",
                  {
                    "font-bold": depth === minDepth,
                    "text-sm opacity-80": depth > minDepth,
                  },
                ]}
              >
                {text}
              </span>
            </a>
          </li>
        );
      })
    }
  </ol>
</section>

<script>
  for (const toc of document.querySelectorAll(".article-toc")) {
    const tocItems = toc.querySelectorAll<HTMLLIElement>("li[data-toc-slug]");

    const update = () => {
      let activeSlug: string | undefined;
      for (const item of tocItems) {
        const slug = item.dataset.tocSlug;
        if (slug === undefined) {
          continue;
        }

        const heading = document.getElementById(slug);
        if (heading === null) {
          continue;
        }

        if (heading.offsetTop <= window.scrollY + 100) {
          activeSlug = slug;
        } else if (activeSlug !== undefined) {
          break;
        }
      }

      for (const item of tocItems) {
        const slug = item.dataset.tocSlug;
        if (slug === undefined) {
          continue;
        }

        if (activeSlug === undefined || slug === activeSlug) {
          item.dataset.active = "true";
        } else {
          item.dataset.active = "false";
        }
      }
    };

    document.addEventListener("scroll", update);
    update();
  }
</script>
