---
import type { GetImageResult, UnresolvedImageTransform } from "astro";
import { getImage } from "astro:assets";
import type { EmbedLinkCardData } from "./createEmbedLinkCardData";
import { got } from "./got";

interface Props {
  data: EmbedLinkCardData;
}

const { data } = Astro.props;

const { url, description, faviconUrl, ogImageUrl } = data;
const title = data.title ?? data.url;
const host = URL.canParse(url) ? new URL(url).host : undefined;

async function tryGetImage(
  options: Omit<UnresolvedImageTransform, "src"> & { src: string | undefined }
): Promise<GetImageResult | undefined> {
  if (options.src === undefined) {
    return undefined;
  }

  try {
    const imageResp = await got(options.src, {
      responseType: "buffer",
    });
    return await getImage({
      ...options,
      src: `data:${imageResp.headers["content-type"]};base64,${imageResp.body.toString("base64")}`,
    });
  } catch (err) {
    console.error(
      `failed to fetch and transform an image in link card: ${err}`
    );
    return undefined;
  }
}

const faviconImage = await tryGetImage({
  src: faviconUrl,
  alt: "",
  densities: [1, 2, 3],
  width: 14,
  height: 14,
});
const ogImage = await tryGetImage({
  src: ogImageUrl,
  alt: "",
  densities: [1, 2, 3],
  width: 240,
  height: 126,
});
---

<div class="not-prose tracking-normal text-start">
  <a
    class="my-5 w-full h-32 flex border rounded overflow-hidden hover:bg-slate-100 transition-colors"
    href={url}
    target="_blank"
  >
    <div class="grow px-5 py-3 flex flex-col gap-1.5 overflow-hidden">
      <span class="text-lg font-bold tracking-wide line-clamp-2">
        {title}
      </span>
      <span class="grow text-sm tracking-wide text-slate-500 truncate">
        {description}
      </span>
      <div class="flex items-center gap-1.5">
        {
          faviconImage !== undefined && (
            <img
              src={faviconImage.src}
              srcset={faviconImage.srcSet.attribute}
              {...faviconImage.attributes}
            />
          )
        }
        <span class="text-sm text-slate-600 truncate">{host}</span>
      </div>
    </div>
    {
      ogImage !== undefined && (
        <img
          src={ogImage.src}
          srcset={ogImage.srcSet.attribute}
          {...ogImage.attributes}
        />
      )
    }
  </a>
</div>
