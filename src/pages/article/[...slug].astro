---
import { getCollection } from "astro:content";
import type { BlogPosting, BreadcrumbList, WithContext } from "schema-dts";
import Layout from "../../layouts/Layout.astro";
import { SITE_NAME } from "../../constant";
import Section from "./_[...slug]/Section.astro";
import ArticleHeader from "./_[...slug]/ArticleHeader.astro";
import ArticleContent from "./_[...slug]/ArticleContent.astro";

export async function getStaticPaths() {
  const articles = await getCollection("article");
  return articles.map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}

const { article } = Astro.props;

if (Astro.site === undefined) {
  throw new Error(
    "Site URL is unset. Please set the site URL in the Astro config."
  );
}
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString();
---

<Layout>
  <Fragment slot="head">
    <title>{article.data.title} | {SITE_NAME}</title>
    <meta name="description" content={article.data.description} />
    <meta property="og:title" content={article.data.title} />
    <meta property="og:type" content="article" />
    <meta property="og:description" content={article.data.description} />
    <meta
      property="article:published_time"
      content={article.data.publishedAt.toISOString()}
    />
    <meta
      property="article:modified_time"
      content={article.data.modifiedAt.toISOString()}
    />
    <meta property="article:author" content="ciffelia" />
    {
      article.data.tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))
    }
    <meta name="twitter:card" content="summary_large_image" />
    {!article.data.isPublished && <meta name="robots" content="noindex" />}
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        itemListElement: [
          {
            "@type": "ListItem",
            position: 1,
            name: article.data.title,
            item: canonicalUrl,
          },
        ],
      } satisfies WithContext<BreadcrumbList>)}
    />
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BlogPosting",
        headline: article.data.title,
        datePublished: article.data.publishedAt.toISOString(),
        dateModified: article.data.modifiedAt.toISOString(),
        image: [
          // TODO
        ],
        author: {
          "@type": "Person",
          name: "ciffelia",
          url: "https://ciffelia.com",
        },
      } satisfies WithContext<BlogPosting>)}
    />
  </Fragment>
  <article class="flex flex-col gap-5">
    <Section>
      <ArticleHeader {article} />
    </Section>
    <Section>
      <ArticleContent {article} />
    </Section>
  </article>
</Layout>
